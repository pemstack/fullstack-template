{
  "Export pema controller with view": {
    "prefix": "expc",
    "body": [
      "import { controller, view } from 'app'",
      "import { $1Controller } from './$1Controller'",
      "import $1View from './$1View'",
      "",
      "export default controller($1Controller, view($1View))"
    ]
  },
  "Export pema view": {
    "prefix": "expv",
    "body": [
      "import { view } from 'app'",
      "import $1View from './$1View'",
      "",
      "export default view($1View)"
    ]
  },
  "Pema controller": {
    "prefix": "ctrl",
    "body": [
      "import { App, Controller, RouteParams } from 'app'",
      "import { action, computed, observable } from 'mobx'",
      "",
      "export interface $1ControllerJSON {",
      "  count: number",
      "}",
      "",
      "export class $1Controller implements Controller {",
      "  @observable count: number = 0",
      "",
      "  constructor(state: $1ControllerJSON, app: App) {",
      "    const { count } = state",
      "    this.count = count || 0",
      "  }",
      "",
      "  onEnter(params: RouteParams) {",
      "",
      "  }",
      "",
      "  @action increment() {",
      "    this.count++",
      "  }",
      "",
      "  @action decrement() {",
      "    this.count--",
      "  }",
      "",
      "  toJSON(): $1ControllerJSON {",
      "    return {",
      "      count: this.count",
      "    }",
      "  }",
      "}",
      ""
    ]
  },
  "Pema controller (extended)": {
    "prefix": "ctrlx",
    "body": [
      "import { Controller, ExtendedApp, RouteParams, WithApp } from 'app'",
      "import { action, computed, observable } from 'mobx'",
      "",
      "type App = ExtendedApp<typeof $1Controller.dependencies>",
      "",
      "export interface $1ControllerJSON {",
      "  count: number",
      "}",
      "",
      "export interface $1Env { }",
      "",
      "export class $1Controller",
      "  implements Controller<WithApp<App>> {",
      "",
      "  static dependencies = {}",
      "",
      "  @observable count: number = 0",
      "",
      "  constructor(state: $1ControllerJSON, app: App, env: $1Env) {",
      "    const { count } = state",
      "    this.count = count || 0",
      "  }",
      "",
      "  onEnter(params: RouteParams<App>) {",
      "",
      "  }",
      "",
      "  @action increment() {",
      "    this.count++",
      "  }",
      "",
      "  @action decrement() {",
      "    this.count--",
      "  }",
      "",
      "  toJSON(): $1ControllerJSON {",
      "    return {",
      "      count: this.count",
      "    }",
      "  }",
      "}",
      ""
    ]
  }
}
