{
  "Export pema controller with view": {
    "scope": "typescript",
    "prefix": "expc",
    "body": [
      "import { controller, view } from 'app'",
      "import { $1Controller } from '${1/(.*)/${1:/downcase}/}.controller'",
      "import { $1View } from './${1/(.*)/${1:/downcase}/}.view'",
      "",
      "export default controller($1Controller, view($1View))",
      ""
    ]
  },
  "Export pema view": {
    "scope": "typescript",
    "prefix": "expv",
    "body": [
      "import { view } from 'app'",
      "import { $1View } from './${1/(.*)/${1:/downcase}/}.view'",
      "",
      "export default view($1View)",
      ""
    ]
  },
  "Pema controller": {
    "scope": "typescript",
    "prefix": "ctrl",
    "body": [
      "import { App, Controller, RouteParams } from 'app'",
      "import { action, computed, observable } from 'mobx'",
      "",
      "export interface $1ControllerJSON {",
      "  count: number",
      "}",
      "",
      "export class $1Controller implements Controller {",
      "  @observable count: number = 0",
      "",
      "  constructor(state: $1ControllerJSON, app: App) {",
      "    const { count } = state",
      "    this.count = count || 0",
      "  }",
      "",
      "  onEnter(params: RouteParams) {",
      "",
      "  }",
      "",
      "  @action increment() {",
      "    this.count++",
      "  }",
      "",
      "  @action decrement() {",
      "    this.count--",
      "  }",
      "",
      "  toJSON(): $1ControllerJSON {",
      "    return {",
      "      count: this.count",
      "    }",
      "  }",
      "}",
      ""
    ]
  },
  "Pema controller (extended)": {
    "scope": "typescript",
    "prefix": "ctrlx",
    "body": [
      "import { Controller, ExtendedApp, RouteParams, WithApp } from 'app'",
      "import { action, computed, observable } from 'mobx'",
      "",
      "type App = ExtendedApp<typeof $1Controller.dependencies>",
      "",
      "export interface $1ControllerJSON {",
      "  count: number",
      "}",
      "",
      "export interface $1Env { }",
      "",
      "export class $1Controller",
      "  implements Controller<WithApp<App>> {",
      "",
      "  static dependencies = {}",
      "",
      "  @observable count: number = 0",
      "",
      "  constructor(state: $1ControllerJSON, app: App, env: $1Env) {",
      "    const { count } = state",
      "    this.count = count || 0",
      "  }",
      "",
      "  onEnter(params: RouteParams<App>) {",
      "",
      "  }",
      "",
      "  @action increment() {",
      "    this.count++",
      "  }",
      "",
      "  @action decrement() {",
      "    this.count--",
      "  }",
      "",
      "  toJSON(): $1ControllerJSON {",
      "    return {",
      "      count: this.count",
      "    }",
      "  }",
      "}",
      ""
    ]
  },
  "Pema view (controller)": {
    "scope": "typescriptreact",
    "prefix": "viewc",
    "body": [
      "import React from 'react'",
      "import { View, WithController } from 'app'",
      "import { Button } from 'antd'",
      "import { observer } from 'mobx-react-lite'",
      "import { $1Controller } from './${1/(.*)/${1:/downcase}/}.controller'",
      "",
      "export interface $1ViewProps { }",
      "",
      "export type $1ViewType = View<WithController<$1Controller> & $1ViewProps>",
      "",
      "const $1View: $1ViewType = observer(({ controller }) => {",
      "  return (",
      "    <div className='$1'>",
      "      $1 page",
      "    </div>",
      "  )",
      "})",
      "",
      "$1View.onEnter = ({ controller, state }) => {",
      "  const initialProps: $1ViewProps = {}",
      "  state.props = initialProps",
      "}",
      ""
    ]
  },
  "Pema view": {
    "scope": "typescriptreact",
    "prefix": "view",
    "body": [
      "import React from 'react'",
      "import { View } from 'app'",
      "import { Button } from 'antd'",
      "",
      "export interface $1ViewProps { }",
      "",
      "export type $1ViewType = View<$1ViewProps>",
      "",
      "export const $1View: $1ViewType = ({ }) => {",
      "  return (",
      "    <div className='$1'>",
      "      $1 page",
      "    </div>",
      "  )",
      "}",
      "",
      "$1View.onEnter = ({ state }) => {",
      "  const initialProps: $1ViewProps = {}",
      "  state.props = initialProps",
      "}",
      ""
    ]
  },
  "Pema view (static)": {
    "scope": "typescriptreact",
    "prefix": "views",
    "body": [
      "import React from 'react'",
      "import { View } from 'app'",
      "import { Button } from 'antd'",
      "",
      "export const $1View: View = ({ }) => {",
      "  return (",
      "    <div className='$1'>",
      "      $1 page",
      "    </div>",
      "  )",
      "}",
      ""
    ]
  },
  "Pema API": {
    "scope": "typescript",
    "prefix": "api",
    "body": [
      "import { Action, Query } from '@pema/state'",
      "import wretch from 'wretch'",
      "import * as yup from 'yup'",
      "",
      "const api = wretch('/api/todos')",
      "",
      "export interface TodoResult {",
      "  title: string",
      "  done: boolean",
      "}",
      "",
      "export const GET_TODOS: Query<TodoResult[]> = {",
      "  resource: 'todos',",
      "  cache: true,",
      "  async fetch() {",
      "    return api.get().json()",
      "  }",
      "}",
      "",
      "const addTodoSchema = yup.object({",
      "  title: yup.string().required(),",
      "  done: yup.boolean().notRequired()",
      "})",
      "",
      "type AddTodoParams = yup.InferType<typeof addTodoSchema>",
      "",
      "export const ADD_TODO: Action<AddTodoParams, void> = {",
      "  schema: addTodoSchema,",
      "  perform(params: AddTodoParams) {",
      "    return api.post(params).res()",
      "  },",
      "  invalidates: ['todos']",
      "}",
      "",
      "export const CLEAR_TODOS: Action<void, void> = {",
      "  async perform() {",
      "    return api.delete().res()",
      "  },",
      "  invalidates: ['todos']",
      "}",
      ""
    ]
  }
}
